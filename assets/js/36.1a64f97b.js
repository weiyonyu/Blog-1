(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{477:function(e,v,a){"use strict";a.r(v);var t=a(13),_=Object(t.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"javascript-高级程序设计-第四版-读书笔记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript-高级程序设计-第四版-读书笔记"}},[e._v("#")]),e._v(" JavaScript 高级程序设计（第四版）读书笔记")]),e._v(" "),v("h2",{attrs:{id:"什么是javascript"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是javascript"}},[e._v("#")]),e._v(" 什么是JavaScript")]),e._v(" "),v("p",[e._v("JavaScript的实现包括以下3个部分：")]),e._v(" "),v("h3",{attrs:{id:"核心-ecmascript"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#核心-ecmascript"}},[e._v("#")]),e._v(" 核心（ECMAScript）")]),e._v(" "),v("p",[e._v("在基本的层面，它描述这门语言的如下部分：")]),e._v(" "),v("ul",[v("li",[e._v("语法")]),e._v(" "),v("li",[e._v("类型")]),e._v(" "),v("li",[e._v("语句")]),e._v(" "),v("li",[e._v("关键字")]),e._v(" "),v("li",[e._v("保留字")]),e._v(" "),v("li",[e._v("操作符")]),e._v(" "),v("li",[e._v("全局对象")])]),e._v(" "),v("h3",{attrs:{id:"文档对象模型-dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文档对象模型-dom"}},[e._v("#")]),e._v(" 文档对象模型（DOM）")]),e._v(" "),v("p",[v("strong",[e._v("文档对象模型")]),e._v("（DOM，Document Object Model）是一个应用编程接口（API），用于在HTML中使用扩展的XML。")]),e._v(" "),v("p",[e._v("DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API，可以轻松地删除、添加、替换、修改节点。")]),e._v(" "),v("h3",{attrs:{id:"浏览器对象模型-bom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器对象模型-bom"}},[e._v("#")]),e._v(" 浏览器对象模型（BOM）")]),e._v(" "),v("p",[e._v("BOM主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的扩展都归在BOM的范畴内。比如，下面就是这样一些扩展：")]),e._v(" "),v("ul",[v("li",[e._v("弹出新浏览器窗口的能力；")]),e._v(" "),v("li",[e._v("移动、缩放和关闭浏览器窗口的能力；")]),e._v(" "),v("li",[v("code",[e._v("navigator")]),e._v("对象，提供关于浏览器的详尽信息；")]),e._v(" "),v("li",[v("code",[e._v("location")]),e._v("对象，提供浏览器加载页面的详尽信息；")]),e._v(" "),v("li",[v("code",[e._v("screen")]),e._v("对象，提供关于用户屏幕分辨率的详尽信息；")]),e._v(" "),v("li",[v("code",[e._v("performance")]),e._v("对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；")]),e._v(" "),v("li",[e._v("对cookie的支持；")]),e._v(" "),v("li",[e._v("其他自定义对象，如"),v("code",[e._v("XMLHttpRequest")]),e._v("和IE的"),v("code",[e._v("ActiveXObject")]),e._v("。")])]),e._v(" "),v("h2",{attrs:{id:"语言基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语言基础"}},[e._v("#")]),e._v(" 语言基础")]),e._v(" "),v("h3",{attrs:{id:"变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[e._v("#")]),e._v(" 变量")]),e._v(" "),v("h4",{attrs:{id:"var与let"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#var与let"}},[e._v("#")]),e._v(" var与let")]),e._v(" "),v("p",[v("code",[e._v("let")]),e._v("跟"),v("code",[e._v("var")]),e._v("的作用差不多，但有着非常重要的区别。最明显的区别是，"),v("code",[e._v("let")]),e._v("声明的范围是块作用域，而"),v("code",[e._v("var")]),e._v("声明的范围是函数作用域。")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("暂时性死区")])]),e._v(" "),v("p",[v("code",[e._v("let")]),e._v("与"),v("code",[e._v("var")]),e._v("的另一个重要的区别，就是"),v("code",[e._v("let")]),e._v("声明的变量不会在作用域中被提升。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("// name会被提升\nconsole.log(name); // undefined\nvar name = 'Matt';\n\n// age不会被提升\nconsole.log(age); // ReferenceError：age没有定义\nlet age = 26;\n")])])]),v("p",[e._v("在解析代码时，JavaScript引擎也会注意出现在块后面的"),v("code",[e._v("let")]),e._v("声明，只不过在此之前不能以任何方式来引用未声明的变量。在"),v("code",[e._v("let")]),e._v("声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在此阶段引用任何后面才声明的变量都会抛出"),v("code",[e._v("ReferenceError")]),e._v("。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("全局声明")])]),e._v(" "),v("p",[e._v("与"),v("code",[e._v("var")]),e._v("关键字不同，使用"),v("code",[e._v("let")]),e._v("在全局作用域中声明的变量不会成为"),v("code",[e._v("window")]),e._v("对象的属性（"),v("code",[e._v("var")]),e._v("声明的变量则会）。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("var name = 'Matt';\nconsole.log(window.name); // 'Matt'\n\nlet age = 26;\nconsole.log(window.age);  // undefined\n")])])]),v("p",[e._v("不过，"),v("code",[e._v("let")]),e._v("声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免"),v("code",[e._v("SyntaxError")]),e._v("，必须确保页面不会重复声明同一个变量。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("条件声明")])]),e._v(" "),v("p",[e._v("在使用"),v("code",[e._v("var")]),e._v("声明变量时，由于声明会被提升，JavaScript引擎会自动将多余的声明在作用域顶部合并为一个声明。因为"),v("code",[e._v("let")]),e._v("的作用域是块，所以不可能检查前面是否已经使用"),v("code",[e._v("let")]),e._v("声明过同名变量，同时也就不可能在没有声明的情况下声明它。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("<script>\n  var name = 'Nicholas';\n  let age = 26;\n<\/script>\n\n<script>\n  // 假设脚本不确定页面中是否已经声明了同名变量\n  // 那它可以假设还没有声明过\n\n  var name = 'Matt';\n  // 这里没问题，因为可以被作为一个提升声明来处理\n  // 不需要检查之前是否声明过同名变量\n\n  let age = 36;\n  // 如果age之前声明过，这里会报错\n<\/script>\n")])])]),v("p",[e._v("使用"),v("code",[e._v("try")]),e._v("/"),v("code",[e._v("catch")]),e._v("语句或"),v("code",[e._v("typeof")]),e._v("操作符也不能解决，因为条件块中"),v("code",[e._v("let")]),e._v("声明的作用域仅限于该块。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("<script>\n  let name = 'Nicholas';\n  let age = 36;\n<\/script>\n\n<script>\n  // 假设脚本不确定页面中是否已经声明了同名变量\n  // 那它可以假设还没有声明过\n\n  if (typeof name === 'undefined') {\n    let name;\n  }\n  // name被限制在if {} 块的作用域内\n  // 因此这个赋值形同全局赋值\n  name = 'Matt';\n\n  try {\n    console.log(age) // 如果age没有声明过，则会报错\n  }\n  catch(error) {\n    let age;\n  }\n  // age被限制在catch {}块的作用域内\n  // 因此这个赋值形同全局赋值\n  age = 26;\n<\/script>\n")])])]),v("p",[e._v("为此，对于"),v("code",[e._v("let")]),e._v("这个新的ES6声明关键字，不能依赖条件声明模式。")]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("注意")]),e._v("　不能使用"),v("code",[e._v("let")]),e._v("进行条件式声明是件好事，因为条件声明是一种反模式，它让程序变得更难理解。如果你发现自己在使用这个模式，那一定有更好的替代方式。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("for循环中的let声明")])]),e._v(" "),v("p",[e._v("在"),v("code",[e._v("let")]),e._v("出现之前，"),v("code",[e._v("for")]),e._v("循环定义的迭代变量会渗透到循环体外部：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("for (var i = 0; i < 5; ++i) {\n  // 循环逻辑\n}\nconsole.log(i); // 5\n")])])]),v("p",[e._v("改成使用"),v("code",[e._v("let")]),e._v("之后，这个问题就消失了，因为迭代变量的作用域仅限于"),v("code",[e._v("for")]),e._v("循环块内部：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("for (let i = 0; i < 5; ++i) {\n  // 循环逻辑\n}\nconsole.log(i); // ReferenceError: i没有定义\n")])])]),v("p",[e._v("在使用"),v("code",[e._v("var")]),e._v("的时候，最常见的问题就是对迭代变量的奇特声明和修改：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("for (var i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 你可能以为会输出0、1、2、3、4\n// 实际上会输出5、5、5、5、5\n")])])]),v("p",[e._v("之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的"),v("code",[e._v("i")]),e._v("都是同一个变量，因而输出的都是同一个最终值。")]),e._v(" "),v("p",[e._v("而在使用"),v("code",[e._v("let")]),e._v("声明迭代变量时，JavaScript引擎在后台会为每个迭代循环声明一个新的迭代变量。每个"),v("code",[e._v("setTimeout")]),e._v("引用的都是不同的变量实例，所以"),v("code",[e._v("console.log")]),e._v("输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("for (let i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 会输出0、1、2、3、4\n")])])]),v("p",[e._v("这种每次迭代声明一个独立变量实例的行为适用于所有风格的"),v("code",[e._v("for")]),e._v("循环，包括"),v("code",[e._v("for-in")]),e._v("和"),v("code",[e._v("for-of")]),e._v("循环。")])])]),e._v(" "),v("h3",{attrs:{id:"数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[e._v("#")]),e._v(" 数据类型")]),e._v(" "),v("p",[e._v("ECMAScript有 6种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、 String 和 Symbol。Symbol（符号）是 ECMAScript 6新增的。还有一种复杂数据类型叫 Object（对象）。Object 是一种无序名值对的集合。")]),e._v(" "),v("h4",{attrs:{id:"typeof-操作符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#typeof-操作符"}},[e._v("#")]),e._v(" typeof 操作符")]),e._v(" "),v("p",[e._v("因为ECMAScript的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。"),v("code",[e._v("typeof")]),e._v("操作符就是为此而生的。对一个值使用"),v("code",[e._v("typeof")]),e._v("操作符会返回下列字符串之一：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v('"undefined"')]),e._v("表示值未定义；")]),e._v(" "),v("li",[v("code",[e._v('"boolean"')]),e._v("表示值为布尔值；")]),e._v(" "),v("li",[v("code",[e._v('"string"')]),e._v("表示值为字符串；")]),e._v(" "),v("li",[v("code",[e._v('"number"')]),e._v("表示值为数值；")]),e._v(" "),v("li",[v("code",[e._v('"object"')]),e._v("表示值为对象（而不是函数）或"),v("code",[e._v("null")]),e._v("；")]),e._v(" "),v("li",[v("code",[e._v('"function"')]),e._v("表示值为函数；")]),e._v(" "),v("li",[v("code",[e._v('"symbol"')]),e._v("表示值为符号。")])]),e._v(" "),v("h4",{attrs:{id:"undefined类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#undefined类型"}},[e._v("#")]),e._v(" "),v("code",[e._v("Undefined")]),e._v("类型")]),e._v(" "),v("p",[v("code",[e._v("Undefined")]),e._v("类型只有一个值，就是特殊值"),v("code",[e._v("undefined")]),e._v("。当使用"),v("code",[e._v("var")]),e._v("或"),v("code",[e._v("let")]),e._v("声明了变量但没有初始化时，就相当于给变量赋予了"),v("code",[e._v("undefined")]),e._v("值")]),e._v(" "),v("h4",{attrs:{id:"null类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#null类型"}},[e._v("#")]),e._v(" "),v("code",[e._v("Null")]),e._v("类型")]),e._v(" "),v("p",[v("code",[e._v("Null")]),e._v("类型同样只有一个值，即特殊值"),v("code",[e._v("null")]),e._v("。逻辑上讲，"),v("code",[e._v("null")]),e._v("值表示一个空对象指针，这也是给"),v("code",[e._v("typeof")]),e._v("传一个"),v("code",[e._v("null")]),e._v("会返回"),v("code",[e._v('"object"')]),e._v("的原因")]),e._v(" "),v("h4",{attrs:{id:"boolean类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#boolean类型"}},[e._v("#")]),e._v(" "),v("code",[e._v("Boolean")]),e._v("类型")]),e._v(" "),v("p",[v("code",[e._v("Boolean")]),e._v("（布尔值）类型是ECMAScript中使用最频繁的类型之一，有两个字面值："),v("code",[e._v("true")]),e._v("和"),v("code",[e._v("false")]),e._v("。这两个布尔值不同于数值，因此"),v("code",[e._v("true")]),e._v("不等于1，"),v("code",[e._v("false")]),e._v("不等于0。")]),e._v(" "),v("h4",{attrs:{id:"number类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#number类型"}},[e._v("#")]),e._v(" "),v("code",[e._v("Number")]),e._v("类型")]),e._v(" "),v("p",[e._v("ECMAScript中最有意思的数据类型或许就是 Number 了。Number 类型使用 IEEE 754格式表示整 数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。")]),e._v(" "),v("h4",{attrs:{id:"string类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string类型"}},[e._v("#")]),e._v(" "),v("code",[e._v("String")]),e._v("类型")]),e._v(" "),v("p",[e._v("String（字符串）数据类型表示零或多个 16 位 Unicode 字符序列。")]),e._v(" "),v("h4",{attrs:{id:"symbol-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型"}},[e._v("#")]),e._v(" "),v("code",[e._v("Symbol")]),e._v(" 类型")]),e._v(" "),v("p",[e._v("Symbol（符号）是 ECMAScript 6新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。 符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。")]),e._v(" "),v("h4",{attrs:{id:"object-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#object-类型"}},[e._v("#")]),e._v(" "),v("code",[e._v("Object")]),e._v(" 类型")]),e._v(" "),v("p",[e._v("ECMAScript中的对象其实就是一组数据和功能的集合。对象通过 new 操作符后跟对象类型的名称 来创建。开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方法")]),e._v(" "),v("h2",{attrs:{id:"变量、作用域与内存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量、作用域与内存"}},[e._v("#")]),e._v(" 变量、作用域与内存")]),e._v(" "),v("h3",{attrs:{id:"原始值与引用值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#原始值与引用值"}},[e._v("#")]),e._v(" 原始值与引用值")]),e._v(" "),v("p",[e._v("ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值（primitive value）就是 最简单的数据，引用值（reference value）则是由多个值构成的对象。")]),e._v(" "),v("p",[e._v("在把一个值赋给变量时，JavaScript 引擎必须确定这个值是原始值还是引用值。上一章讨论了 6 种原始值：Undefined、Null、Boolean、Number、String 和 Symbol。保存原始值的变量是按值（by value）访问的，因为我们操作的就是存储在变量中的实际值。")]),e._v(" "),v("h3",{attrs:{id:"执行上下文与作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文与作用域"}},[e._v("#")]),e._v(" 执行上下文与作用域")]),e._v(" "),v("p",[e._v("执行上下文（以下简称“上下文”）的概念在 JavaScript中是颇为重要的。变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable object）， 而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。")]),e._v(" "),v("p",[e._v("每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个上下文栈上。 在函数执行完之后，上下文栈会弹出该函数上下文，将控制权返还给之前的执行上下文。ECMAScript 程序的执行流就是通过这个上下文栈进行控制的。")]),e._v(" "),v("p",[e._v("上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。代码正在执行的上下文的变量对象始终位于作用域 链的最前端。如果上下文是函数，则其活动对象（activation object）用作变量对象。活动对象最初只有 一个定义变量：arguments。（全局上下文中没有这个变量。）作用域链中的下一个变量对象来自包含上 下文，再下一个对象来自再下一个包含上下文。以此类推直至全局上下文；全局上下文的变量对象始终是作用域链的最后一个变量对象。")]),e._v(" "),v("h3",{attrs:{id:"垃圾回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[e._v("#")]),e._v(" 垃圾回收")]),e._v(" "),v("p",[e._v("JavaScript 是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。在 C和 C++等 语言中，跟踪内存使用对开发者来说是个很大的负担，也是很多问题的来源。JavaScript 为开发者卸下 了这个负担，通过自动内存管理实现内存分配和闲置资源回收。基本思路很简单：确定哪个变量不会再 使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。")]),e._v(" "),v("h4",{attrs:{id:"标记清理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标记清理"}},[e._v("#")]),e._v(" 标记清理")]),e._v(" "),v("p",[e._v("JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数 内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永 远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。")]),e._v(" "),v("p",[e._v("垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它 会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记 的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。")]),e._v(" "),v("h4",{attrs:{id:"性能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[e._v("#")]),e._v(" 性能")]),e._v(" "),v("p",[e._v("垃圾回收程序会周期性运行，如果内存中分配了很多变量，则可能造成性能损失，因此垃圾回收的 时间调度很重要。尤其是在内存有限的移动设备上，垃圾回收有可能会明显拖慢渲染的速度和帧速率。 开发者不知道什么时候运行时会收集垃圾，因此最好的办法是在写代码时就要做到：无论什么时候开始 收集垃圾，都能让它尽快结束工作。")]),e._v(" "),v("p",[e._v("现代垃圾回收程序会基于对 JavaScript 运行时环境的探测来决定何时运行。探测机制因引擎而异，但基本上都是根据已分配对象的大小和数量来判断的。比如，根据 V8团队 2016年的一篇博文的说法： “在一次完整的垃圾回收之后，V8的堆增长策略会根据活跃对象的数量外加一些余量来确定何时再次垃圾回收。”")])])}),[],!1,null,null,null);v.default=_.exports}}]);